# -*- coding: utf-8 -*-
"""370_Mod_7_logistic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15mzAEjQ85N8g8y1uhT8XnUuaVELc88hO

Title: Titanic Analysis
Description: A logistic regression approach to explining survival.
Created by: Jalyn Buthman
"""

import pandas as pd
import statsmodels.formula.api as smf
import numpy as np

#read in the data
titanic = pd.read_csv("/content/titanic.csv")
#force pandas to show all of the columns
pd.set_option('display.max_columns', None)

print(titanic.head(20))
print()
print(titanic.info())
print()
print(titanic.describe())
print()

#We need to generate category codes for the test categorical variables
#first we transform the data type to a categorical data type
#create a new column based on the old column of the same name
titanic['who'] = pd.Categorical(titanic['who'])
titanic['alone'] = pd.Categorical(titanic['alone'])

#second we copute cat codes and save in new columns
titanic['who_codes'] = titanic['who'].cat.codes
titanic['alone_codes'] = titanic['alone'].cat.codes

print(titanic.info())
print()
print(titanic.head(20))
print()

#create the logistic regression model to look at relationships
model = smf.logit(formula='survived ~ pclass + who + age', data = titanic).fit()
print(model.summary())
print()

#the llr p-value can be used similarly to the f statistic
#the psedo r squared shows how well our variable explains the output (% of variance explained)
#check if the vaiable's p value is less than 0.05
#the coeff cannot be used for logistic regression (different scale than the outcome)

#to use to coeff for the model you must exponentiate the independent variable coeffs to interprett the effect
#when you exponentiate them they become an odds ration
odds_ratios = np.exp(model.params)
print('The odds ratios for the IV coefficients:')
print(odds_ratios)
print()

#odds ratio quantifies the ratio between the predictor variable and the probability of the outcome occurring
#the odds of someone surviving based on the passenger class, a 1 ratio means the the odds don't change based on passenger class
#a ratio of .42 means that the odds decrease as class changes from 1 to 2 and from 2 to 3, a number above one means that the odds increase
#the 3rd class has the lowest survival rate, .42 compared to 2nd class, double that compared to 1st class

#when looking at sex as an independent variable the default value is a child, the man would be less likley to survive than a child and a would would be more likely to survive (~ who)
#check to see if each variable within the model is signifigant by checkng if the p>|z| is less than 0.5

#same code as above, but only including one independant variable (class)


import pandas as pd
import statsmodels.formula.api as smf
import numpy as np

#read in the data
titanic = pd.read_csv("/content/titanic.csv")
#force pandas to show all of the columns
pd.set_option('display.max_columns', None)

print(titanic.head(20))
print()
print(titanic.info())
print()
print(titanic.describe())
print()

#We need to generate category codes for the test categorical variables
#first we transform the data type to a categorical data type
#create a new column based on the old column of the same name
titanic['who'] = pd.Categorical(titanic['who'])
titanic['alone'] = pd.Categorical(titanic['alone'])

#second we copute cat codes and save in new columns
titanic['who_codes'] = titanic['who'].cat.codes
titanic['alone_codes'] = titanic['alone'].cat.codes

print(titanic.info())
print()

#create the logistic regression model to look at relationships
model = smf.logit(formula='survived ~ pclass', data = titanic).fit()
print(model.summary())
print()

#the llr p-value can be used similarly to the f statistic
#the psedo r squared shows how well our variable explains the output
#check if the vaiable's p value is less than 0.05
#the coeff cannot be used for logistic regression (different scale than the outcome)

#to use to coeff for the model you must exponentiate the independent variable coeffs to interprett the effect
#when you exponentiate them they become an odds ration
odds_ratios = np.exp(model.params)
print('The odds ratios for the IV coefficients:')
print(odds_ratios)
print()

#odds ratio quantifies the ratio between the predictor variable and the probability of the outcome occurring
#the odds of someone surviving based on the passenger class, a 1 ratio means the the odds don't change based on passenger class
#a ratio of .42 means that the odds decrease as class changes from 1 to 2 and from 2 to 3, a number above one means that the odds increase
#the 3rd class has the lowest survival rate, .42 compared to 2nd class, double that compared to 1st class